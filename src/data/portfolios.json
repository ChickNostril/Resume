{
  "starbucks": {
    "title": "스타벅스 홈페이지 클론 코딩",
    "imageUrl": [
      "/starbucks/login.png",
      "/starbucks/signup2.png",
      "/starbucks/notice.png",
      "/starbucks/noticeDetail.png"
    ],
    "description": "스타벅스 홈페이지를 클론하여 웹 디자인, 게시판, 회원 관리 기능을 구현한 프로젝트입니다.",
    "overview": {
      "name": "스타벅스 홈페이지 클론 코딩",
      "period": "2023년 1월 1일 ~ 2023년 6월 13일",
      "role": "프론트엔드 개발",
      "stack": "Javascript, HTML, CSS, PHP, phpmyadmin",
      "team": "개인 프로젝트"
    },
    "motivation": "이 프로젝트는 프론트엔드와 서버 측 스크립팅 기술을 통합적으로 이해하고, 웹 개발의 전체적인 흐름을 경험하기 위해 시작했습니다.\n 사용자와 직접 상호작용하는 웹 페이지를 클론하면서, 실제 서비스와 유사한 기능을 구현하고자 했습니다.\n 특히, PHP와 phpMyAdmin을 사용하여 데이터베이스 관리와 서버 측 기능 구현을 경험하며, 실무에 필요한 기본 기술들을 다져나가기 위해 이 프로젝트를 수행했습니다.",
    "contributions": [
      {
        "title": "프론트엔드 개발",
        "tasks": [
          "HTML, CSS, JavaScript를 사용하여 스타벅스 홈페이지의 UI와 UX를 최대한 유사하게 구현하여, 실제 사이트와 같은 사용자 경험을 제공합니다.",
          "PHP를 활용해 게시판 기능을 구현하여 사용자가 게시글을 작성, 수정, 삭제할 수 있는 기능을 추가했습니다.",
          "회원가입과 로그인 기능을 통해 사용자 관리를 구현하였으며, 세션 관리로 로그인 상태를 유지할 수 있도록 했습니다."
        ],
        "achievements": [
          "프론트엔드와 서버 측 스크립팅 기술을 통합하여 웹 애플리케이션을 완성함으로써, 웹 개발의 전반적인 기술을 익힐 수 있었습니다.",
          "실제 웹 사이트와 유사한 디자인과 기능을 구현하여 실무에 가까운 경험을 쌓았습니다.",
          "PHP와 데이터베이스 관리 도구인 phpMyAdmin을 활용하여 게시판과 회원 관리 기능을 구현하면서, 서버와 클라이언트 간의 데이터 흐름을 이해하게 되었습니다."
        ]
      }
    ],
    "positives": [
      "웹 디자인과 기능을 최대한 유사하게 구현하여 사용성과 완성도를 높였습니다.",
      "프론트엔드와 백엔드를 통합적으로 경험하며, 전체적인 웹 개발 프로세스를 이해할 수 있었습니다."
    ],
    "negatives": [
      "더 다양한 기능을 추가하지 못한 점과 UI/UX의 세부적인 디테일을 완벽하게 구현하지 못한 점이 아쉬웠습니다."
    ],
    "conclusion": "이 프로젝트를 통해 프론트엔드와 서버 측 기술을 종합적으로 활용하여 웹 애플리케이션을 개발하는 경험을 쌓을 수 있었습니다. 특히, 서버 측 스크립팅과 데이터베이스 관리의 기초를 다지며, 웹 개발의 기본 원리와 실무 적용 가능성을 높였습니다. 앞으로의 프로젝트에서는 더 많은 기능과 더 나은 사용자 경험을 제공할 수 있는 방향으로 발전시키고자 합니다."
  },

  "pokemon": {
    "title": "포켓몬 도감 사이트",
    "imageUrl": [
      "/pokemon/pokemon.png",
      "/pokemon/pokemonInfo.png",
      "/pokemon/pokemonStatus.png"
    ],
    "description": "React와 Styled-components로 도감 구현 및 Firebase로 OAuth 로그인 및 배포를 완료한 개인 프로젝트",
    "overview": {
      "name": "포켓몬 도감 사이트",
      "period": "2023년 11월 13일 ~ 2023년 12월 4일",
      "role": "프론트엔드 개발",
      "stack": "Javascript, React, Styled-Components, Firebase",
      "team": "개인 프로젝트"
    },
    "motivation": "이 프로젝트는 프론트엔드 개발 기술을 강화하고, 오픈 API를 활용한 데이터 처리 경험을 쌓기 위해 시작했습니다.\n pokeAPI를 통해 다양한 포켓몬 데이터를 효율적으로 가져와 사용자에게 제공하는 과정을 통해 실무에서 자주 활용되는 데이터 연동 및 상태 관리 기술을 학습하고자 했습니다.\n 또한, React와 Styled-components를 활용해 직관적이고 사용자 친화적인 UI를 구현하는 동시에, Firebase를 통해 서버리스 환경에서의 인증 및 배포를 경험해 보고자 했습니다.",
    "contributions": [
      {
        "title": "웹 프론트엔드 개발",
        "tasks": [
          "React와 Styled-components를 사용하여 포켓몬 도감의 UI와 UX를 직관적이고 사용자 친화적으로 설계하였습니다.",
          "Firebase Authentication을 이용해 Google OAuth 로그인을 구현하여 사용자의 인증을 간편하게 처리하였습니다.",
          "pokeAPI를 활용하여 포켓몬 데이터를 효과적으로 관리하고, 사용자가 이름, 타입 등 다양한 기준으로 포켓몬을 필터링할 수 있는 기능을 구현하였습니다.",
          "Firebase Hosting을 활용하여 프로젝트를 안정적이고 신속하게 배포하였으며, 사용자가 언제든지 접근할 수 있도록 웹사이트를 공개하였습니다."
        ],
        "achievements": [
          "React의 컴포넌트 기반 구조를 최대한 활용하여 유지보수성과 재사용성을 높였습니다.",
          "Firebase를 통한 인증 및 배포 경험을 쌓아, 서버리스 환경에서의 웹 애플리케이션 운영을 이해하게 되었습니다.",
          "pokeAPI를 통해 다양한 포켓몬 데이터를 시각적으로 정리하고 필터링하여 사용자가 원하는 정보를 쉽게 찾을 수 있는 UX를 제공하였습니다."
        ]
      }
    ],
    "positives": [
      "사용자 친화적인 인터페이스와 직관적인 필터링 기능을 구현하여 도감의 탐색 경험을 향상시켰습니다.",
      "Firebase를 통해 빠르고 간편한 배포 및 인증 처리를 구현하여 프로젝트 운영의 효율성을 높였습니다."
    ],
    "negatives": [
      "pokeAPI 데이터를 처음으로 다루면서 데이터 처리 과정에서 많은 시행착오를 겪었습니다. 특히, API로부터 데이터를 받아오는 방법과 이를 효과적으로 관리하는 데 있어 미숙함이 있었습니다. 이로 인해 다양한 도감 기능을 구현하지 못한 점이 아쉬웠습니다.",
      "API 데이터를 활용하여 추가적인 포켓몬 비교 기능이나 고급 필터링 옵션 등을 제공하지 못해, 사용자 경험을 더욱 풍부하게 만드는 데 한계가 있었습니다."
    ],
    "conclusion": "포켓몬 도감 웹사이트 프로젝트는 React와 Styled-components를 이용해 프론트엔드 개발을 집중적으로 경험할 수 있었던 프로젝트입니다. Firebase를 활용하여 인증 및 배포의 간소화를 이루며, 오픈 API를 통해 데이터 연동과 관리의 중요성을 이해하게 되었습니다. 앞으로의 프로젝트에서는 더 많은 기능과 데이터 관리의 효율성을 높이는 방향으로 발전시키고자 합니다."
  },

  "community": {
    "title": "아무 말 대잔치",
    "imageUrl": [
      "/community/Community.png",
      "/community/userEdit.png",
      "/community/noticeDetail.png"
    ],
    "description": "Express와 MySQL로 게시판 사이트를 구현하여 백엔드와 데이터베이스 연동을 구현한 카카오테크 부트캠프 개인 프로젝트",
    "overview": {
      "name": "아무 말 대잔치",
      "period": "2024년 4월 ~ 2024년 7월",
      "role": "프론트엔드 개발",
      "stack": "Javascript, React, Express, MySQL",
      "team": "개인 프로젝트"
    },
    "motivation": "이 프로젝트는 프론트엔드 개발 경험을 토대로 백엔드 기술에 대한 이해를 높이기 위해 시작했습니다.\n Express와 MySQL을 처음 접해보며 서버와 데이터베이스의 기본적인 작동 원리와 연동 방식을 학습하고자 했습니다.\n 초기에 API 명세와 서버 구조를 설계하는 과정에서 많은 어려움을 겪었지만, 이를 통해 실제 서비스의 기초가 되는 백엔드 개발을 경험할 수 있었습니다.",
    "contributions": [
      {
        "title": "웹 프론트엔드 개발",
        "tasks": [
          "React를 사용하여 사용자 친화적인 게시판 UI를 구축하고, 게시글 작성, 수정, 삭제 등의 기능을 제공하였습니다.",
          "Express를 활용하여 RESTful API를 설계하고, MySQL과 연동하여 데이터를 효율적으로 관리하였습니다.",
          "사용자 인증 및 인가를 구현하여 회원가입, 로그인, 로그아웃 기능을 통해 사용자 관리를 강화하고, 웹 애플리케이션의 보안성을 높였습니다.",
          "CRUD 기능을 완전히 지원하는 게시판을 구현하여 사용자가 게시글을 자유롭게 작성하고 관리할 수 있도록 하였습니다."
        ],
        "achievements": [
          "Express와 MySQL을 활용한 서버와 데이터베이스 연동을 통해 백엔드 개발에 대한 이해를 높였으며, 데이터 흐름과 서버 구조의 기본을 다질 수 있었습니다.",
          "React를 이용한 컴포넌트 기반의 프론트엔드 개발을 통해 UI/UX 개선과 유지보수성을 향상시켰습니다.",
          "사용자 인증 및 권한 관리 기능을 구현함으로써 웹 애플리케이션의 보안성을 강화하고, 실제 서비스와 유사한 환경을 경험할 수 있었습니다."
        ]
      }
    ],
    "positives": [
      "Express와 MySQL을 활용하여 서버와 데이터베이스를 유기적으로 연결하고, 데이터를 효율적으로 처리하는 경험을 쌓았습니다.",
      "프론트엔드와 백엔드의 데이터 연동을 통해 전체적인 웹 개발 흐름을 이해하고 구현할 수 있었습니다."
    ],
    "negatives": [
      "Express와 같은 백엔드 기술을 처음 접하면서, API 명세 작성과 서버 설계 과정에서 많은 어려움을 겪었습니다.",
      "초기 기획 단계에서 명확한 설계를 하지 못해 개발 속도가 다소 늦어진 점이 아쉬웠습니다."
    ],
    "conclusion": "아무 말 대잔치 프로젝트를 통해 Express와 MySQL의 실제 사용 경험을 쌓고, 프론트엔드와 백엔드를 통합적으로 개발하는 데 많은 배움을 얻을 수 있었습니다. 특히, 서버와 데이터베이스의 기본적인 데이터 연동 방식과 사용자 관리의 중요성을 깨달았으며, 향후 프로젝트에서는 기획 단계에서부터 명확한 목표 설정과 기능 확장을 통해 더 나은 웹 서비스를 제공할 수 있도록 노력하고자 합니다."
  },

  "hackerton": {
    "title": "AI 기반 대화형 장소 추천 시스템",
    "imageUrl": [
      "/hackerton/Hackerton.png",
      "/hackerton/form.png",
      "/hackerton/formtag.png"
    ],
    "description": "카카오테크 부트캠프 해커톤에서 제주 관광객을 위한 AI 기반으로 맞춤형 장소 추천을 제공하는 대화형 시스템",
    "overview": {
      "name": "AI 기반 대화형 장소 추천 시스템",
      "period": "2024년 8월 5일 ~ 2024년 8월 7일",
      "role": "프론트엔드 개발",
      "stack": "Java, TypeScript, React, Zustand, SpringBoot, 비짓제주 관광 공공데이터 API, OpenAI API, 크램폴린 IDE",
      "team": "클라우드 1명, BE 2명, FE 2명"
    },
    "motivation": "이 프로젝트는 해커톤의 일환으로, 프론트엔드와 백엔드 간의 협업을 통해 실질적인 문제 해결 능력을 향상시키고, 공공 데이터를 활용한 서비스 개발 경험을 쌓기 위해 시작했습니다.\n 특히, 관광객들이 다양한 선택지 속에서 적합한 장소를 찾는 데 어려움을 겪는 문제를 AI 기반의 대화형 시스템으로 해결하고자 했습니다.",
    "contributions": [
      {
        "title": "프론트엔드 개발",
        "tasks": [
          "React와 Zustand를 활용하여 프론트엔드의 아키텍처를 설계하고, 컴포넌트 기반으로 구현하여 유지보수성과 재사용성을 높였습니다.",
          "사용자의 입력을 받아 AI와의 대화를 통해 추가 정보를 수집하고, 최적의 장소를 추천하는 인터페이스를 구현하였습니다.",
          "비짓제주 관광 공공데이터와 OpenAI API를 연동하여, 사용자 맞춤형 장소 추천이 정확하고 효율적으로 이루어지도록 하였습니다.",
          "크램폴린 IDE를 이용해 개발 환경에서 빠르게 배포하고 테스트할 수 있는 프로세스를 구축하였습니다."
        ],
        "achievements": [
          "AI와 공공 데이터를 결합하여 개인 맞춤형 장소 추천 서비스를 구현, 사용자 만족도와 여행 효율성을 높였습니다.",
          "팀원 간의 원활한 협업과 효과적인 프론트엔드-백엔드 연동을 통해 빠른 개발과 안정적인 서비스를 제공할 수 있었습니다.",
          "React와 Zustand의 사용을 통해 프론트엔드의 상태 관리를 최적화하고, 대화형 인터페이스의 성능과 사용자 경험을 개선했습니다."
        ]
      },
      {
        "title": "협업 및 커뮤니케이션",
        "tasks": [
          "백엔드 팀과의 협력을 통해 OpenAI API와 비짓제주 관광 공공데이터 API를 연동하고, 프론트엔드에서 사용자의 입력을 받아 AI가 적절하게 응답할 수 있도록 대화형 인터페이스를 구현했습니다.",
          "프론트엔드 팀원들과의 코드 리뷰를 통해 AI와의 상호작용 로직을 최적화하고, 사용자 입력에 따른 다양한 시나리오를 원활하게 처리할 수 있도록 개선했습니다.",
          "팀 내 실시간 개발 상황을 공유하고, AI의 대화 흐름 및 인터페이스 개선 사항을 조정했습니다."
        ],
        "achievements": [
          "프론트엔드에서 사용자의 입력을 효과적으로 처리하고, AI의 응답을 매끄럽게 연결하는 대화형 UI를 구현하여 사용자 경험을 개선했습니다.",
          "백엔드 팀과의 긴밀한 협업을 통해 API 연동 시 발생할 수 있는 문제를 빠르게 해결하고, 대화형 AI 시스템의 성능과 안정성을 높였습니다."
        ]
      }
    ],
    "positives": [
      "사용자 입력을 기반으로 AI가 자연스럽게 대화형 질문을 생성하여 사용자의 참여도를 높였습니다.",
      "공공 데이터를 활용하여 실제 관광객들에게 유용한 정보를 제공하며, 데이터 활용의 긍정적인 사례를 만들었습니다.",
      "React와 Zustand를 활용해 상태 변화를 효과적으로 관리하고, 사용자 입력과 AI 응답 간의 연속성을 유지하며 성능을 최적화했습니다."
    ],
    "negatives": [
      "짧은 개발 기간으로 인해 추가적인 기능 구현과 UI/UX의 세부적인 디테일을 완성하지 못한 점이 아쉬웠습니다.",
      "AI 학습 데이터와 프롬프트의 제한으로 인해 일부 추천 결과의 정확도가 낮거나 예상과 다르게 나타난 점이 있었습니다."
    ],
    "conclusion": "AI 기반 대화형 장소 추천 시스템은 사용자 입력을 바탕으로 한 맞춤형 추천의 가능성을 보여주었으며, 공공 데이터와 AI 기술의 통합을 통해 실질적인 여행 계획에 도움을 주는 혁신적인 솔루션을 제공했습니다. 향후에는 더 많은 데이터와 사용자 피드백을 반영하여 추천의 정확성을 높이고, 사용자 경험을 더욱 개선할 계획입니다."
  },

  "sumda": {
    "title": "숨쉬는 다람쥐 숨다",
    "imageUrl": ["/sumda/sumda-proto.png", "/sumda/sumda-final.png"],
    "description": "공공 데이터 API를 활용해 실시간 날씨와 대기질 정보 제공 및 다람쥐 육성 게이미피케이션 기능을 포함한 웹 서비스",
    "overview": {
      "name": "숨 쉬는 다람쥐 숨다",
      "period": "2024년 7월 22일 ~ 2024년 9월 29일",
      "role": "프론트엔드 개발",
      "stack": "TypeScript, React, CSS, Zustand",
      "team": "FE 2명, BE 3명"
    },
    "motivation": "현대 사회에서 실시간 환경 정보 제공은 필수적인 서비스로 자리 잡고 있습니다.\n 이에 더해 사용자 경험을 개선하고자, 실시간 날씨와 대기질 정보를 제공하면서도 게이미피케이션 요소를 결합한 웹 서비스를 구상했습니다.\n 공공 데이터 API를 활용하여 사용자가 실시간으로 날씨 및 대기질 정보를 확인하고, 다람쥐 육성과 같은 게임 요소를 통해 재미있고 흥미롭게 접근할 수 있는 서비스를 기획하게 되었습니다.",
    "contributions": [
      {
        "title": "웹 프론트엔드 개발",
        "tasks": [
          "공공 데이터 API를 활용하여 사용자가 현재 위치에 따른 날씨와 대기질 정보를 실시간으로 조회할 수 있는 기능을 구현했습니다.",
          "Zustand를 활용하여 앱의 전역 상태를 효율적으로 관리하고, 데이터 일관성을 유지하여 사용자 경험을 최적화했습니다.",
          "Kakao OAuth를 사용하여 간편한 로그인 기능을 구현하고, 사용자 인증을 통해 개인화된 데이터를 제공했습니다.",
          "사용자가 Kakao OAuth로 로그인하면 JWT 토큰을 발급받고, 이를 통해 다양한 종류의 다람쥐 정보를 불러와 육성할 수 있는 시스템을 구현했습니다. 사용자는 일일 미션을 통해 도토리를 획득하고, 이를 바탕으로 다양한 다람쥐를 육성할 수 있습니다.",
          "초기 1차 스프린트 동안 첫 번째 이미지처럼 기본적인 UI를 구현했으나 CSS 개선이 필요함을 느껴 두 번째 이미지처럼 UI를 더욱 깔끔하고 직관적으로 개선했습니다."
        ],
        "achievements": [
          "React와 Zustand를 통해 컴포넌트 기반의 상태 관리와 UI 설계를 최적화하여 사용자 경험을 향상시켰습니다.",
          "CSS를 개선함으로써 기본적인 UI에서 더욱 직관적이고 깔끔한 UI로 발전시켜 사용자 편의성을 증대시켰습니다.",
          "Kakao OAuth를 통한 사용자 인증과 JWT 기반의 데이터 관리로 보안성과 개인화된 서비스를 제공했습니다.",
          "게임 요소를 추가하여 사용자 참여도를 높이고, 날씨/대기질 정보를 재미있게 접근할 수 있도록 했습니다."
        ]
      },
      {
        "title": "협업 및 커뮤니케이션",
        "tasks": [
          "백엔드 팀과의 원활한 API 연동 및 데이터 통신을 담당하여, 날씨와 대기질 정보뿐만 아니라 게이미피케이션 요소와 관련된 데이터를 정확하게 전달받을 수 있도록 협업을 진행했습니다.",
          "UI 개선 과정에서 프론트엔드 팀원과의 피드백 및 코드 리뷰를 통해 지속적으로 UI/UX를 발전시켰고 기능의 안정성 또한 높였습니다.",
          "CSS 개선 작업을 팀원들과 공유하며, 디자인 개선 방향에 대한 의견을 적극적으로 반영하여 최종적으로 직관적이고 깔끔한 UI를 구현했습니다.",
          "주기적인 팀 미팅을 통해 프로젝트 진행 상황을 공유하고, 개발 일정을 효율적으로 관리했습니다."
        ],
        "achievements": [
          "UI 개선 작업에서 프론트엔드 팀원과의 협업과 코드 리뷰를 통해 디자인의 완성도를 높였으며, 사용자 경험을 크게 향상시켰습니다.",
          "백엔드 팀과의 긴밀한 협력을 통해 API 연동 문제를 최소화하고, 신속한 데이터 처리로 서비스의 안정성을 확보했습니다.",
          "코드 리뷰와 팀 내 피드백을 통해 코드 품질을 지속적으로 향상시켰으며, 기능 개발의 효율성을 높였습니다."
        ]
      }
    ],
    "positives": [
      "실시간 데이터 제공과 게임 요소를 성공적으로 통합하여, 사용자가 날씨와 대기질 정보를 단순히 확인하는 것을 넘어서, 재미있는 방식으로 서비스를 이용할 수 있도록 설계했습니다. 이로 인해 사용자 참여도가 높아졌고, 정보 제공의 흥미를 더했습니다.",
      "Kakao OAuth를 통한 간편한 로그인과 JWT 기반 인증 시스템을 효과적으로 구현하여, 개인화된 서비스 제공을 통해 사용자 편의성을 극대화했습니다.",
      "Zustand를 통한 전역 상태 관리 최적화로 인해 데이터의 일관성을 유지하면서 사용자 경험을 크게 향상시켰습니다. 특히, 성능 개선과 중복된 API 호출 방지를 통해 앱의 응답 속도를 높이는 데 기여했습니다.",
      "UI/UX 개선 과정에서의 지속적인 피드백 수용과 개선 노력을 통해 처음 설계된 UI에서부터 최종 버전까지 눈에 띄는 발전을 이루어냈습니다. 이를 통해 사용자 인터페이스가 더욱 직관적이고, 시각적으로도 만족스러운 결과를 얻을 수 있었습니다.",
      "팀원들과의 원활한 협업을 통해 API 연동 문제를 최소화하고, 데이터 처리 과정에서 발생할 수 있는 오류를 줄여 서비스의 안정성을 확보했습니다. 이로 인해 사용자들이 원활하게 실시간 데이터를 확인할 수 있었습니다."
    ],
    "negatives": [
      "짧은 개발 기간으로 인해 UI/UX의 디테일을 더 깊이 있게 다듬지 못한 부분이 아쉬웠습니다. 그러나 이 과정을 통해 효율적인 CSS 개선 방법을 학습하고, 협업을 통해 디자인적 피드백을 적극 수용하며 프로젝트에서 더 발전된 디자인을 적용할 수 있는 경험을 쌓게 되었습니다.",
      "게이미피케이션 기능의 확장성과 다양성을 더 높일 수 있었던 부분에서 아쉬움이 남지만, 해당 프로젝트에서 얻은 경험을 바탕으로 향후 확장성과 사용자 경험을 고려한 더 다양한 기능을 개발할 계획입니다.",
      "   추후 비슷한 프로젝트에서 기능 구현의 완성도를 높이는 데 기여할 것이라 생각합니다."
    ],
    "conclusion": "숨쉬는 다람쥐 숨다 프로젝트는 실시간 데이터 제공과 사용자 참여를 유도하는 게임 요소를 결합한 웹 서비스로, 공공 데이터와 AI 기술을 활용한 혁신적인 접근을 시도했습니다. 향후에는 사용자 피드백을 반영하여 기능의 확장성과 서비스의 안정성을 더욱 강화하고, 다양한 다람쥐 캐릭터와 미션을 추가하여 사용자 경험을 풍부하게 만들 계획입니다."
  },

  "autoRiggerTool": {
    "title": "Auto-Rigger Tool",
    "imageUrl": ["/auto-rigger/1.png", "/auto-rigger/2.png", "/auto-rigger/3.png", "/auto-rigger/4.png"],
    "description": "3D 모델 업로드 및 리깅 작업을 간편하게 수행할 수 있는 웹 기반 3D 리깅 서비스",
    "overview": {
      "name": "Auto-Rigger Tool",
      "period": "2024년 11월 12일 ~ 2024년 11월 29일",
      "role": "프론트엔드 개발",
      "stack": "React, TypeScript, React-Three/Fiber, Three.js, Sass",
      "team": "-"
    },
    "motivation": "3D 아티스트와 개발자가 보다 직관적이고 효율적으로 리깅 작업을 수행할 수 있도록 돕기 위해 프로젝트를 시작했습니다. React와 Three.js를 활용해 웹 기반의 3D 리깅 도구를 제공하여, 리깅 작업에 필요한 시간을 절약하고 직관적인 UI/UX를 통해 사용자 경험을 향상시키고자 했습니다.",
    "contributions": [
      {
        "title": "프론트엔드 개발",
        "tasks": [
          "React와 React-Three/Fiber를 사용하여 3D 리깅 인터페이스를 개발하고, Three.js를 활용하여 모델 렌더링 및 Raycasting 기능 구현.",
          "Select Model, Adjust Model, Place Markers, Preview Skeleton, Create Rig 등 5단계 리깅 워크플로우 설계 및 구현.",
          "리깅 마커 배치 UI를 개발하여 사용자가 드래그 앤 드롭으로 간편하게 마커를 배치할 수 있도록 지원.",
          "Blender 스크립트를 활용해 서버와 통신하며 사용자 마커 데이터를 기반으로 리깅 결과물을 생성하고, GLB 파일로 다운로드 가능하게 구현."
        ],
        "achievements": [
          "React-Three/Fiber와 Three.js를 결합하여 3D 환경을 효율적으로 렌더링하고 상호작용 가능하게 구현.",
          "5단계의 사용자 워크플로우를 직관적이고 효율적으로 설계하여 작업 시간을 단축하고 사용자 편의성을 대폭 향상.",
          "Blender 스크립트와의 통합으로 복잡한 리깅 프로세스를 자동화하여 결과물을 정확하고 신속하게 생성."
        ]
      },
      {
        "title": "협업 및 커뮤니케이션",
        "tasks": [
          "백엔드 팀과의 긴밀한 협력을 통해 Blender 기반 리깅 스크립트를 연동하고, JSON 데이터 업로드 및 리깅 결과 다운로드 프로세스를 최적화.",
          "UI/UX 설계 과정에서 팀원들과 지속적인 피드백을 주고받으며 사용자 중심의 디자인 개선.",
          "리깅 마커 데이터 처리 로직을 개발하여 정확한 마커 배치와 좌표 계산이 가능하도록 구현."
        ],
        "achievements": [
          "백엔드 팀과의 협업을 통해 Blender 스크립트를 활용한 리깅 데이터 생성 프로세스를 안정적으로 구현.",
          "UI/UX 개선 작업을 통해 사용자 경험을 대폭 향상시키고 직관적인 작업 환경을 제공."
        ]
      }
    ],
    "positives": [
      "React-Three/Fiber와 Three.js를 사용해 복잡한 3D 환경을 간단하고 효율적으로 렌더링.",
      "Blender 스크립트를 활용해 자동 리깅 프로세스를 통합하고, 결과물을 신속히 생성.",
      "단계별 워크플로우 설계로 리깅 작업의 효율성을 극대화하고, 직관적인 UI/UX 제공."
    ],
    "negatives": [
      "짧은 개발 기간으로 인해 고급 기능(예: 애니메이션 미리보기) 구현에 제한이 있었음.",
      "Blender 스크립트의 복잡성과 학습 곡선으로 인해 초기 개발 과정에서 시간이 다소 지연."
    ],
    "conclusion": "Auto-Rigger Tool 프로젝트를 통해 웹 기반 3D 리깅 도구의 가능성을 확인할 수 있었습니다. Blender 스크립트를 활용하여 리깅 프로세스를 자동화하고, 사용자 중심의 직관적인 UI를 제공함으로써 리깅 작업 효율성을 극대화했습니다. 향후 애니메이션 미리보기와 고급 리깅 옵션을 추가하여 사용자 경험을 더욱 향상시킬 계획입니다."
  },

  "faWebViewer": {
    "title": "FA-WebViewer",
    "imageUrl": ["/fa-webviewer/app1.png", "/fa-webviewer/app2.png", "/fa-webviewer/app2_2.png"],
    "description": "음성 발화 파일(`.wav`)을 기반으로 애니메이션을 생성하고 이를 시각화하는 기능을 제공하는 웹 애플리케이션",
    "overview": {
      "name": "FA-WebViewer",
      "period": "2024년 12월 4일 ~ 2024년 12월 20일",
      "role": "프론트엔드 개발",
      "stack": "React, Three.js, React-Three/Fiber, Sass, FastAPI, Uvicorn",
      "team": "-"
    },
    "motivation": "음성 데이터를 기반으로 애니메이션을 생성하고 이를 실시간으로 시각화하는 도구를 제공하기 위해 시작된 프로젝트입니다. React와 Three.js를 사용해 직관적인 UI를 제공하며, FastAPI를 통해 애니메이션 생성 파이프라인과 통신하여 실시간 애니메이션 데이터를 처리합니다.",
    "contributions": [
      {
        "title": "프론트엔드 개발",
        "tasks": [
          "React와 React-Three/Fiber를 사용해 3D 애니메이션 뷰어 인터페이스를 개발하고, Three.js로 모델 렌더링 및 애니메이션 재생 기능 구현.",
          "App1: `.wav` 파일 업로드 및 애니메이션 생성 요청 기능 개발.",
          "App2: `.wav` 및 `.nfa` 파일을 기반으로 애니메이션 재생 및 뷰어 기능 구현.",
          "Drag & Drop과 Click 방식으로 파일 업로드 UI 설계 및 개발.",
          "모델 선택 및 감정 선택 기능 구현으로 사용자 커스터마이징 지원."
        ],
        "achievements": [
          "React-Three/Fiber와 Three.js를 결합해 애니메이션 데이터를 실시간으로 렌더링 및 시각화 가능하게 구현.",
          "사용자 중심의 워크플로우(App1, App2)를 설계하여 음성 데이터를 기반으로 애니메이션 생성 및 뷰어 기능 제공.",
          "SCSS를 활용한 반응형 UI 설계로 다양한 디바이스에서 애플리케이션 사용 가능."
        ]
      },
      {
        "title": "백엔드와의 협업",
        "tasks": [
          "FastAPI와 통신하여 애니메이션 생성 파이프라인(FA)과의 데이터 처리 연동.",
          "FA 파이프라인에서 반환된 애니메이션 데이터를 프론트엔드로 전달하는 프록시 서버 구현.",
          "CORS 설정을 통해 React와 FastAPI 간의 원활한 통신 보장.",
          "React 빌드 파일을 FastAPI 서버에 통합하여 단일 서버에서 애플리케이션 배포."
        ],
        "achievements": [
          "FastAPI와 프론트엔드 간의 효율적인 데이터 통신을 구현하여 애니메이션 생성과 시각화를 통합.",
          "React와 FastAPI의 통합 배포를 통해 CORS 문제를 해결하고 사용자 경험을 향상."
        ]
      }
    ],
    "positives": [
      "React-Three/Fiber와 Three.js를 사용해 복잡한 3D 애니메이션을 간단하고 효율적으로 렌더링.",
      "FastAPI를 활용한 애니메이션 생성 파이프라인 연동으로 실시간 데이터 처리 가능.",
      "단계별 워크플로우(App1, App2)를 설계하여 사용자 경험을 직관적이고 효율적으로 제공."
    ],
    "negatives": [
      "FA 파이프라인의 사양 변경 시 프론트엔드와 백엔드의 동시 수정 필요로 인해 유지보수에 시간이 소요됨.",
      "짧은 개발 기간으로 인해 고급 기능(예: 애니메이션 편집) 구현에 한계가 있었음."
    ],
    "conclusion": "FA-WebViewer는 음성 데이터를 기반으로 애니메이션을 생성하고 시각화하는 혁신적인 웹 애플리케이션입니다. 프론트엔드와 백엔드의 긴밀한 협력을 통해 실시간 애니메이션 생성 및 시각화를 성공적으로 구현했으며, 향후 애니메이션 편집 및 확장 기능을 추가하여 사용자 경험을 더욱 향상시킬 계획입니다."
  },

  "gsViewer": {
    "title": "Gaussian Splatting Viewer",
    "imageUrl": [
      "/gs-viewer/Viewer.png", "/gs-viewer/Viewer2.png"
    ],
    "description": "동영상 또는 YouTube URL을 입력받아 Gaussian Splatting 기술을 활용하여 3D 포인트 클라우드 데이터를 생성하고 이를 웹에서 시각화하는 프로젝트.",
    "overview": {
      "name": "Gaussian Splatting Viewer",
      "period": "2024년 11월 28일 ~ 2025년 2월 10일",
      "role": "프론트엔드 및 백엔드 개발",
      "stack": "React, Three.js, React-Three/Fiber, Sass, FastAPI, Uvicorn, AWS S3",
      "team": "FE/BE 1명, GPU 서버 개발 1명, PM 1명"
    },
    "motivation": "Gaussian Splatting 기술을 이용하여 동영상을 3D 포인트 클라우드로 변환하고, 이를 실시간으로 웹에서 시각화하는 도구를 제공하기 위해 시작된 프로젝트입니다. React Three Fiber(R3F)와 WebGL을 활용해 실시간 3D 렌더링을 구현하며, FastAPI 및 GPU 서버를 통해 Gaussian Splatting 알고리즘을 실행합니다.",
    "contributions": [
      {
        "title": "프론트엔드 개발",
        "tasks": [
          "React와 React-Three/Fiber를 사용하여 3D Viewer 구현 및 Gaussian Splatting 데이터 시각화.",
          "사용자가 동영상 파일(.mp4, .mov) 업로드 또는 YouTube URL을 입력하여 프로젝트를 생성할 수 있는 기능 개발.",
          "소스 타입(Fisheye, Equirectangular, Vanilla) 선택 UI 및 데이터 처리 로직 개발.",
          "줌, 회전, 이동과 같은 사용자 조작 기능이 포함된 WebGL 기반 Viewer 인터페이스 개발.",
          "반응형 UI 설계 및 SCSS를 활용한 스타일링 최적화."
        ],
        "achievements": [
          "React Three Fiber(R3F)와 WebGL을 결합하여 3D Gaussian Splatting 데이터를 실시간 렌더링 및 시각화.",
          "사용자 친화적인 프로젝트 생성 및 관리 기능을 통해 직관적인 워크플로우 제공.",
          "반응형 UI 설계로 다양한 화면 크기에서 최적의 사용자 경험 제공."
        ]
      },
      {
        "title": "백엔드 및 GPU 서버 연동",
        "tasks": [
          "FastAPI 기반 백엔드를 개발하여 프론트엔드와 GPU 서버 간 API 통신 구현.",
          "AWS S3와 연동하여 사용자가 업로드한 동영상 파일을 저장하고, GPU 서버에서 생성한 .ply 파일을 관리.",
          "GPU 서버로 데이터를 전송하고 Gaussian Splatting 알고리즘을 실행한 후 결과물을 받아 변환하는 프로세스 개발.",
          "폴링 방식으로 처리 상태를 확인하는 기존 구조에서 GPU 서버의 콜백 방식을 활용하는 방식으로 개선.",
          "S3에서 .ply 파일을 다운로드하여 .splat 파일로 변환하는 스크립트 개발."
        ],
        "achievements": [
          "FastAPI와 GPU 서버 간의 효율적인 데이터 통신을 구현하여 Gaussian Splatting 프로세스 최적화.",
          "AWS S3 스토리지와의 연동을 통해 대용량 동영상 파일 및 결과 데이터를 안정적으로 관리.",
          "콜백 방식을 적용하여 GPU 서버와의 통신 속도를 개선하고 API 응답 시간을 최적화."
        ]
      }
    ],
    "positives": [
      "React Three Fiber(R3F)와 WebGL을 사용하여 대규모 3D Gaussian Splatting 데이터를 효과적으로 렌더링.",
      "FastAPI 및 AWS S3와 연동하여 대용량 동영상 파일을 안정적으로 처리 가능.",
      "콜백 방식의 API 응답 구조를 적용하여 GPU 서버 통신의 효율성을 극대화."
    ],
    "negatives": [
      "Gaussian Splatting 알고리즘의 연산 시간이 길어, 대용량 동영상 처리 시 대기 시간이 발생할 수 있음.",
      "Fisheye 및 Equirectangular 소스 타입의 경우 데이터 변환 과정이 복잡하여 추가적인 최적화 필요함."
    ],
    "conclusion": "Gaussian Splatting Viewer는 동영상 데이터를 3D 포인트 클라우드로 변환하고 이를 실시간으로 시각화하는 도구입니다. 프론트엔드와 백엔드의 긴밀한 연계를 통해 프로젝트 생성, 데이터 변환, 3D 렌더링을 효율적으로 구현했으며, 향후 최적화를 통해 더 빠르고 안정적인 Gaussian Splatting 처리를 제공할 계획입니다."
  }
}
